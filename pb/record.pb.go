// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.12.4
// source: record.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SectionType int32

const (
	SectionType_SECTION_HEADER       SectionType = 0
	SectionType_SECTION_CHUNK_HEADER SectionType = 1
	SectionType_SECTION_CHUNK_BODY   SectionType = 2
	SectionType_SECTION_INDEX        SectionType = 3
	SectionType_SECTION_CHANNEL      SectionType = 4
)

// Enum value maps for SectionType.
var (
	SectionType_name = map[int32]string{
		0: "SECTION_HEADER",
		1: "SECTION_CHUNK_HEADER",
		2: "SECTION_CHUNK_BODY",
		3: "SECTION_INDEX",
		4: "SECTION_CHANNEL",
	}
	SectionType_value = map[string]int32{
		"SECTION_HEADER":       0,
		"SECTION_CHUNK_HEADER": 1,
		"SECTION_CHUNK_BODY":   2,
		"SECTION_INDEX":        3,
		"SECTION_CHANNEL":      4,
	}
)

func (x SectionType) Enum() *SectionType {
	p := new(SectionType)
	*p = x
	return p
}

func (x SectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[0].Descriptor()
}

func (SectionType) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[0]
}

func (x SectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SectionType(num)
	return nil
}

// Deprecated: Use SectionType.Descriptor instead.
func (SectionType) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

type CompressType int32

const (
	CompressType_COMPRESS_NONE CompressType = 0
	CompressType_COMPRESS_BZ2  CompressType = 1
	CompressType_COMPRESS_LZ4  CompressType = 2
)

// Enum value maps for CompressType.
var (
	CompressType_name = map[int32]string{
		0: "COMPRESS_NONE",
		1: "COMPRESS_BZ2",
		2: "COMPRESS_LZ4",
	}
	CompressType_value = map[string]int32{
		"COMPRESS_NONE": 0,
		"COMPRESS_BZ2":  1,
		"COMPRESS_LZ4":  2,
	}
)

func (x CompressType) Enum() *CompressType {
	p := new(CompressType)
	*p = x
	return p
}

func (x CompressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[1].Descriptor()
}

func (CompressType) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[1]
}

func (x CompressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompressType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompressType(num)
	return nil
}

// Deprecated: Use CompressType.Descriptor instead.
func (CompressType) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

type SingleIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *SectionType `protobuf:"varint,1,opt,name=type,enum=apollo.cyber.proto.SectionType" json:"type,omitempty"`
	Position *uint64      `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	// Types that are assignable to Cache:
	//
	//	*SingleIndex_ChannelCache
	//	*SingleIndex_ChunkHeaderCache
	//	*SingleIndex_ChunkBodyCache
	Cache isSingleIndex_Cache `protobuf_oneof:"cache"`
}

func (x *SingleIndex) Reset() {
	*x = SingleIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleIndex) ProtoMessage() {}

func (x *SingleIndex) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleIndex.ProtoReflect.Descriptor instead.
func (*SingleIndex) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

func (x *SingleIndex) GetType() SectionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SectionType_SECTION_HEADER
}

func (x *SingleIndex) GetPosition() uint64 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (m *SingleIndex) GetCache() isSingleIndex_Cache {
	if m != nil {
		return m.Cache
	}
	return nil
}

func (x *SingleIndex) GetChannelCache() *ChannelCache {
	if x, ok := x.GetCache().(*SingleIndex_ChannelCache); ok {
		return x.ChannelCache
	}
	return nil
}

func (x *SingleIndex) GetChunkHeaderCache() *ChunkHeaderCache {
	if x, ok := x.GetCache().(*SingleIndex_ChunkHeaderCache); ok {
		return x.ChunkHeaderCache
	}
	return nil
}

func (x *SingleIndex) GetChunkBodyCache() *ChunkBodyCache {
	if x, ok := x.GetCache().(*SingleIndex_ChunkBodyCache); ok {
		return x.ChunkBodyCache
	}
	return nil
}

type isSingleIndex_Cache interface {
	isSingleIndex_Cache()
}

type SingleIndex_ChannelCache struct {
	ChannelCache *ChannelCache `protobuf:"bytes,101,opt,name=channel_cache,json=channelCache,oneof"`
}

type SingleIndex_ChunkHeaderCache struct {
	ChunkHeaderCache *ChunkHeaderCache `protobuf:"bytes,102,opt,name=chunk_header_cache,json=chunkHeaderCache,oneof"`
}

type SingleIndex_ChunkBodyCache struct {
	ChunkBodyCache *ChunkBodyCache `protobuf:"bytes,103,opt,name=chunk_body_cache,json=chunkBodyCache,oneof"`
}

func (*SingleIndex_ChannelCache) isSingleIndex_Cache() {}

func (*SingleIndex_ChunkHeaderCache) isSingleIndex_Cache() {}

func (*SingleIndex_ChunkBodyCache) isSingleIndex_Cache() {}

type ChunkHeaderCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageNumber *uint64 `protobuf:"varint,1,opt,name=message_number,json=messageNumber" json:"message_number,omitempty"`
	BeginTime     *uint64 `protobuf:"varint,2,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	EndTime       *uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	RawSize       *uint64 `protobuf:"varint,4,opt,name=raw_size,json=rawSize" json:"raw_size,omitempty"`
}

func (x *ChunkHeaderCache) Reset() {
	*x = ChunkHeaderCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkHeaderCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkHeaderCache) ProtoMessage() {}

func (x *ChunkHeaderCache) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkHeaderCache.ProtoReflect.Descriptor instead.
func (*ChunkHeaderCache) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkHeaderCache) GetMessageNumber() uint64 {
	if x != nil && x.MessageNumber != nil {
		return *x.MessageNumber
	}
	return 0
}

func (x *ChunkHeaderCache) GetBeginTime() uint64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *ChunkHeaderCache) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *ChunkHeaderCache) GetRawSize() uint64 {
	if x != nil && x.RawSize != nil {
		return *x.RawSize
	}
	return 0
}

type ChunkBodyCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageNumber *uint64 `protobuf:"varint,1,opt,name=message_number,json=messageNumber" json:"message_number,omitempty"`
}

func (x *ChunkBodyCache) Reset() {
	*x = ChunkBodyCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkBodyCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkBodyCache) ProtoMessage() {}

func (x *ChunkBodyCache) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkBodyCache.ProtoReflect.Descriptor instead.
func (*ChunkBodyCache) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkBodyCache) GetMessageNumber() uint64 {
	if x != nil && x.MessageNumber != nil {
		return *x.MessageNumber
	}
	return 0
}

type ChannelCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageNumber *uint64 `protobuf:"varint,1,opt,name=message_number,json=messageNumber" json:"message_number,omitempty"`
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MessageType   *string `protobuf:"bytes,3,opt,name=message_type,json=messageType" json:"message_type,omitempty"`
	ProtoDesc     []byte  `protobuf:"bytes,4,opt,name=proto_desc,json=protoDesc" json:"proto_desc,omitempty"`
}

func (x *ChannelCache) Reset() {
	*x = ChannelCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCache) ProtoMessage() {}

func (x *ChannelCache) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCache.ProtoReflect.Descriptor instead.
func (*ChannelCache) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelCache) GetMessageNumber() uint64 {
	if x != nil && x.MessageNumber != nil {
		return *x.MessageNumber
	}
	return 0
}

func (x *ChannelCache) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChannelCache) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *ChannelCache) GetProtoDesc() []byte {
	if x != nil {
		return x.ProtoDesc
	}
	return nil
}

type SingleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName *string `protobuf:"bytes,1,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	Time        *uint64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Content     []byte  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (x *SingleMessage) Reset() {
	*x = SingleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleMessage) ProtoMessage() {}

func (x *SingleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleMessage.ProtoReflect.Descriptor instead.
func (*SingleMessage) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *SingleMessage) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *SingleMessage) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *SingleMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type MapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (x *MapInfo) Reset() {
	*x = MapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInfo) ProtoMessage() {}

func (x *MapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInfo.ProtoReflect.Descriptor instead.
func (*MapInfo) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

func (x *MapInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MapInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type VehicleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *VehicleInfo) Reset() {
	*x = VehicleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleInfo) ProtoMessage() {}

func (x *VehicleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleInfo.ProtoReflect.Descriptor instead.
func (*VehicleInfo) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

func (x *VehicleInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorVersion    *uint32       `protobuf:"varint,1,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	MinorVersion    *uint32       `protobuf:"varint,2,opt,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`
	Compress        *CompressType `protobuf:"varint,3,opt,name=compress,enum=apollo.cyber.proto.CompressType" json:"compress,omitempty"`
	ChunkInterval   *uint64       `protobuf:"varint,4,opt,name=chunk_interval,json=chunkInterval" json:"chunk_interval,omitempty"`
	SegmentInterval *uint64       `protobuf:"varint,5,opt,name=segment_interval,json=segmentInterval" json:"segment_interval,omitempty"`
	IndexPosition   *uint64       `protobuf:"varint,6,opt,name=index_position,json=indexPosition,def=0" json:"index_position,omitempty"`
	ChunkNumber     *uint64       `protobuf:"varint,7,opt,name=chunk_number,json=chunkNumber,def=0" json:"chunk_number,omitempty"`
	ChannelNumber   *uint64       `protobuf:"varint,8,opt,name=channel_number,json=channelNumber,def=0" json:"channel_number,omitempty"`
	BeginTime       *uint64       `protobuf:"varint,9,opt,name=begin_time,json=beginTime,def=0" json:"begin_time,omitempty"`
	EndTime         *uint64       `protobuf:"varint,10,opt,name=end_time,json=endTime,def=0" json:"end_time,omitempty"`
	MessageNumber   *uint64       `protobuf:"varint,11,opt,name=message_number,json=messageNumber,def=0" json:"message_number,omitempty"`
	Size            *uint64       `protobuf:"varint,12,opt,name=size,def=0" json:"size,omitempty"`
	IsComplete      *bool         `protobuf:"varint,13,opt,name=is_complete,json=isComplete,def=0" json:"is_complete,omitempty"`
	ChunkRawSize    *uint64       `protobuf:"varint,14,opt,name=chunk_raw_size,json=chunkRawSize" json:"chunk_raw_size,omitempty"`
	SegmentRawSize  *uint64       `protobuf:"varint,15,opt,name=segment_raw_size,json=segmentRawSize" json:"segment_raw_size,omitempty"`
	MapInfo         *MapInfo      `protobuf:"bytes,16,opt,name=map_info,json=mapInfo" json:"map_info,omitempty"`
	VehicleInfo     *VehicleInfo  `protobuf:"bytes,17,opt,name=vehicle_info,json=vehicleInfo" json:"vehicle_info,omitempty"`
}

// Default values for Header fields.
const (
	Default_Header_IndexPosition = uint64(0)
	Default_Header_ChunkNumber   = uint64(0)
	Default_Header_ChannelNumber = uint64(0)
	Default_Header_BeginTime     = uint64(0)
	Default_Header_EndTime       = uint64(0)
	Default_Header_MessageNumber = uint64(0)
	Default_Header_Size          = uint64(0)
	Default_Header_IsComplete    = bool(false)
)

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{7}
}

func (x *Header) GetMajorVersion() uint32 {
	if x != nil && x.MajorVersion != nil {
		return *x.MajorVersion
	}
	return 0
}

func (x *Header) GetMinorVersion() uint32 {
	if x != nil && x.MinorVersion != nil {
		return *x.MinorVersion
	}
	return 0
}

func (x *Header) GetCompress() CompressType {
	if x != nil && x.Compress != nil {
		return *x.Compress
	}
	return CompressType_COMPRESS_NONE
}

func (x *Header) GetChunkInterval() uint64 {
	if x != nil && x.ChunkInterval != nil {
		return *x.ChunkInterval
	}
	return 0
}

func (x *Header) GetSegmentInterval() uint64 {
	if x != nil && x.SegmentInterval != nil {
		return *x.SegmentInterval
	}
	return 0
}

func (x *Header) GetIndexPosition() uint64 {
	if x != nil && x.IndexPosition != nil {
		return *x.IndexPosition
	}
	return Default_Header_IndexPosition
}

func (x *Header) GetChunkNumber() uint64 {
	if x != nil && x.ChunkNumber != nil {
		return *x.ChunkNumber
	}
	return Default_Header_ChunkNumber
}

func (x *Header) GetChannelNumber() uint64 {
	if x != nil && x.ChannelNumber != nil {
		return *x.ChannelNumber
	}
	return Default_Header_ChannelNumber
}

func (x *Header) GetBeginTime() uint64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return Default_Header_BeginTime
}

func (x *Header) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return Default_Header_EndTime
}

func (x *Header) GetMessageNumber() uint64 {
	if x != nil && x.MessageNumber != nil {
		return *x.MessageNumber
	}
	return Default_Header_MessageNumber
}

func (x *Header) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return Default_Header_Size
}

func (x *Header) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_Header_IsComplete
}

func (x *Header) GetChunkRawSize() uint64 {
	if x != nil && x.ChunkRawSize != nil {
		return *x.ChunkRawSize
	}
	return 0
}

func (x *Header) GetSegmentRawSize() uint64 {
	if x != nil && x.SegmentRawSize != nil {
		return *x.SegmentRawSize
	}
	return 0
}

func (x *Header) GetMapInfo() *MapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *Header) GetVehicleInfo() *VehicleInfo {
	if x != nil {
		return x.VehicleInfo
	}
	return nil
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MessageType *string `protobuf:"bytes,2,opt,name=message_type,json=messageType" json:"message_type,omitempty"`
	ProtoDesc   []byte  `protobuf:"bytes,3,opt,name=proto_desc,json=protoDesc" json:"proto_desc,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{8}
}

func (x *Channel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Channel) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *Channel) GetProtoDesc() []byte {
	if x != nil {
		return x.ProtoDesc
	}
	return nil
}

type ChunkHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime     *uint64 `protobuf:"varint,1,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	EndTime       *uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	MessageNumber *uint64 `protobuf:"varint,3,opt,name=message_number,json=messageNumber" json:"message_number,omitempty"`
	RawSize       *uint64 `protobuf:"varint,4,opt,name=raw_size,json=rawSize" json:"raw_size,omitempty"`
}

func (x *ChunkHeader) Reset() {
	*x = ChunkHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkHeader) ProtoMessage() {}

func (x *ChunkHeader) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkHeader.ProtoReflect.Descriptor instead.
func (*ChunkHeader) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{9}
}

func (x *ChunkHeader) GetBeginTime() uint64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *ChunkHeader) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *ChunkHeader) GetMessageNumber() uint64 {
	if x != nil && x.MessageNumber != nil {
		return *x.MessageNumber
	}
	return 0
}

func (x *ChunkHeader) GetRawSize() uint64 {
	if x != nil && x.RawSize != nil {
		return *x.RawSize
	}
	return 0
}

type ChunkBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*SingleMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *ChunkBody) Reset() {
	*x = ChunkBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkBody) ProtoMessage() {}

func (x *ChunkBody) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkBody.ProtoReflect.Descriptor instead.
func (*ChunkBody) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{10}
}

func (x *ChunkBody) GetMessages() []*SingleMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*SingleIndex `protobuf:"bytes,1,rep,name=indexes" json:"indexes,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{11}
}

func (x *Index) GetIndexes() []*SingleIndex {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type RecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordName *string  `protobuf:"bytes,1,opt,name=record_name,json=recordName,def=" json:"record_name,omitempty"`
	TotalTimeS *float64 `protobuf:"fixed64,2,opt,name=total_time_s,json=totalTimeS" json:"total_time_s,omitempty"`
	CurrTimeS  *float64 `protobuf:"fixed64,3,opt,name=curr_time_s,json=currTimeS,def=0" json:"curr_time_s,omitempty"`
	Progress   *float64 `protobuf:"fixed64,4,opt,name=progress,def=0" json:"progress,omitempty"`
}

// Default values for RecordInfo fields.
const (
	Default_RecordInfo_RecordName = string("")
	Default_RecordInfo_CurrTimeS  = float64(0)
	Default_RecordInfo_Progress   = float64(0)
)

func (x *RecordInfo) Reset() {
	*x = RecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordInfo) ProtoMessage() {}

func (x *RecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordInfo.ProtoReflect.Descriptor instead.
func (*RecordInfo) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{12}
}

func (x *RecordInfo) GetRecordName() string {
	if x != nil && x.RecordName != nil {
		return *x.RecordName
	}
	return Default_RecordInfo_RecordName
}

func (x *RecordInfo) GetTotalTimeS() float64 {
	if x != nil && x.TotalTimeS != nil {
		return *x.TotalTimeS
	}
	return 0
}

func (x *RecordInfo) GetCurrTimeS() float64 {
	if x != nil && x.CurrTimeS != nil {
		return *x.CurrTimeS
	}
	return Default_RecordInfo_CurrTimeS
}

func (x *RecordInfo) GetProgress() float64 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return Default_RecordInfo_Progress
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd6, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x6f,
	0x6c, 0x6c, 0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x54, 0x0a, 0x12,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x6f, 0x6c, 0x6c,
	0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x10,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x37, 0x0a, 0x0e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x65, 0x73, 0x63, 0x22, 0x60, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x21,
	0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xd1, 0x05, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x6f, 0x6c, 0x6c,
	0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x61, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x6f, 0x6c, 0x6c, 0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f,
	0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x42,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x6f, 0x6c, 0x6c,
	0x6f, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x7b, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x04, 0x2a, 0x45, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x5a, 0x32, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x5a, 0x34, 0x10, 0x02, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x2f, 0x70, 0x62,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_record_proto_goTypes = []interface{}{
	(SectionType)(0),         // 0: apollo.cyber.proto.SectionType
	(CompressType)(0),        // 1: apollo.cyber.proto.CompressType
	(*SingleIndex)(nil),      // 2: apollo.cyber.proto.SingleIndex
	(*ChunkHeaderCache)(nil), // 3: apollo.cyber.proto.ChunkHeaderCache
	(*ChunkBodyCache)(nil),   // 4: apollo.cyber.proto.ChunkBodyCache
	(*ChannelCache)(nil),     // 5: apollo.cyber.proto.ChannelCache
	(*SingleMessage)(nil),    // 6: apollo.cyber.proto.SingleMessage
	(*MapInfo)(nil),          // 7: apollo.cyber.proto.MapInfo
	(*VehicleInfo)(nil),      // 8: apollo.cyber.proto.VehicleInfo
	(*Header)(nil),           // 9: apollo.cyber.proto.Header
	(*Channel)(nil),          // 10: apollo.cyber.proto.Channel
	(*ChunkHeader)(nil),      // 11: apollo.cyber.proto.ChunkHeader
	(*ChunkBody)(nil),        // 12: apollo.cyber.proto.ChunkBody
	(*Index)(nil),            // 13: apollo.cyber.proto.Index
	(*RecordInfo)(nil),       // 14: apollo.cyber.proto.RecordInfo
}
var file_record_proto_depIdxs = []int32{
	0, // 0: apollo.cyber.proto.SingleIndex.type:type_name -> apollo.cyber.proto.SectionType
	5, // 1: apollo.cyber.proto.SingleIndex.channel_cache:type_name -> apollo.cyber.proto.ChannelCache
	3, // 2: apollo.cyber.proto.SingleIndex.chunk_header_cache:type_name -> apollo.cyber.proto.ChunkHeaderCache
	4, // 3: apollo.cyber.proto.SingleIndex.chunk_body_cache:type_name -> apollo.cyber.proto.ChunkBodyCache
	1, // 4: apollo.cyber.proto.Header.compress:type_name -> apollo.cyber.proto.CompressType
	7, // 5: apollo.cyber.proto.Header.map_info:type_name -> apollo.cyber.proto.MapInfo
	8, // 6: apollo.cyber.proto.Header.vehicle_info:type_name -> apollo.cyber.proto.VehicleInfo
	6, // 7: apollo.cyber.proto.ChunkBody.messages:type_name -> apollo.cyber.proto.SingleMessage
	2, // 8: apollo.cyber.proto.Index.indexes:type_name -> apollo.cyber.proto.SingleIndex
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkHeaderCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkBodyCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_record_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SingleIndex_ChannelCache)(nil),
		(*SingleIndex_ChunkHeaderCache)(nil),
		(*SingleIndex_ChunkBodyCache)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		EnumInfos:         file_record_proto_enumTypes,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}
